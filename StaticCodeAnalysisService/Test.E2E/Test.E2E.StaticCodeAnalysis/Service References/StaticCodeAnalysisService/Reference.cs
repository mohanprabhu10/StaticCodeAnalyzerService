//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Test.E2E.StaticCodeAnalysis.StaticCodeAnalysisService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Tools", Namespace="http://schemas.datacontract.org/2004/07/Models.Tools")]
    public enum Tools : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Resharper = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PVS = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Simian = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AnalysisReport", Namespace="http://schemas.datacontract.org/2004/07/Models.AnalysisReport")]
    [System.SerializableAttribute()]
    public partial class AnalysisReport : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LineField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Line {
            get {
                return this.LineField;
            }
            set {
                if ((this.LineField.Equals(value) != true)) {
                    this.LineField = value;
                    this.RaisePropertyChanged("Line");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TypeId {
            get {
                return this.TypeIdField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeIdField, value) != true)) {
                    this.TypeIdField = value;
                    this.RaisePropertyChanged("TypeId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GatingResult", Namespace="http://schemas.datacontract.org/2004/07/Models.GatingResult")]
    [System.SerializableAttribute()]
    public partial class GatingResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BranchField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NoOfErrorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReositoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ResultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Test.E2E.StaticCodeAnalysis.StaticCodeAnalysisService.Tools ToolField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Branch {
            get {
                return this.BranchField;
            }
            set {
                if ((object.ReferenceEquals(this.BranchField, value) != true)) {
                    this.BranchField = value;
                    this.RaisePropertyChanged("Branch");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DateTime {
            get {
                return this.DateTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.DateTimeField, value) != true)) {
                    this.DateTimeField = value;
                    this.RaisePropertyChanged("DateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NoOfError {
            get {
                return this.NoOfErrorField;
            }
            set {
                if ((this.NoOfErrorField.Equals(value) != true)) {
                    this.NoOfErrorField = value;
                    this.RaisePropertyChanged("NoOfError");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Reository {
            get {
                return this.ReositoryField;
            }
            set {
                if ((object.ReferenceEquals(this.ReositoryField, value) != true)) {
                    this.ReositoryField = value;
                    this.RaisePropertyChanged("Reository");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Result {
            get {
                return this.ResultField;
            }
            set {
                if ((this.ResultField.Equals(value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Test.E2E.StaticCodeAnalysis.StaticCodeAnalysisService.Tools Tool {
            get {
                return this.ToolField;
            }
            set {
                if ((this.ToolField.Equals(value) != true)) {
                    this.ToolField = value;
                    this.RaisePropertyChanged("Tool");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="StaticCodeAnalysisService.IStaticCodeAnalysisService")]
    public interface IStaticCodeAnalysisService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStaticCodeAnalysisService/SignUp", ReplyAction="http://tempuri.org/IStaticCodeAnalysisService/SignUpResponse")]
        bool SignUp(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStaticCodeAnalysisService/SignUp", ReplyAction="http://tempuri.org/IStaticCodeAnalysisService/SignUpResponse")]
        System.Threading.Tasks.Task<bool> SignUpAsync(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStaticCodeAnalysisService/SignIn", ReplyAction="http://tempuri.org/IStaticCodeAnalysisService/SignInResponse")]
        bool SignIn(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStaticCodeAnalysisService/SignIn", ReplyAction="http://tempuri.org/IStaticCodeAnalysisService/SignInResponse")]
        System.Threading.Tasks.Task<bool> SignInAsync(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStaticCodeAnalysisService/DeleteUser", ReplyAction="http://tempuri.org/IStaticCodeAnalysisService/DeleteUserResponse")]
        bool DeleteUser(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStaticCodeAnalysisService/DeleteUser", ReplyAction="http://tempuri.org/IStaticCodeAnalysisService/DeleteUserResponse")]
        System.Threading.Tasks.Task<bool> DeleteUserAsync(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStaticCodeAnalysisService/Logout", ReplyAction="http://tempuri.org/IStaticCodeAnalysisService/LogoutResponse")]
        bool Logout();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStaticCodeAnalysisService/Logout", ReplyAction="http://tempuri.org/IStaticCodeAnalysisService/LogoutResponse")]
        System.Threading.Tasks.Task<bool> LogoutAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStaticCodeAnalysisService/Download", ReplyAction="http://tempuri.org/IStaticCodeAnalysisService/DownloadResponse")]
        bool Download(string url, string branch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStaticCodeAnalysisService/Download", ReplyAction="http://tempuri.org/IStaticCodeAnalysisService/DownloadResponse")]
        System.Threading.Tasks.Task<bool> DownloadAsync(string url, string branch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStaticCodeAnalysisService/InvokeTool", ReplyAction="http://tempuri.org/IStaticCodeAnalysisService/InvokeToolResponse")]
        bool InvokeTool(string path, Test.E2E.StaticCodeAnalysis.StaticCodeAnalysisService.Tools tool);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStaticCodeAnalysisService/InvokeTool", ReplyAction="http://tempuri.org/IStaticCodeAnalysisService/InvokeToolResponse")]
        System.Threading.Tasks.Task<bool> InvokeToolAsync(string path, Test.E2E.StaticCodeAnalysis.StaticCodeAnalysisService.Tools tool);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStaticCodeAnalysisService/ParseReport", ReplyAction="http://tempuri.org/IStaticCodeAnalysisService/ParseReportResponse")]
        Test.E2E.StaticCodeAnalysis.StaticCodeAnalysisService.AnalysisReport[] ParseReport(Test.E2E.StaticCodeAnalysis.StaticCodeAnalysisService.Tools tool, string path, string branch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStaticCodeAnalysisService/ParseReport", ReplyAction="http://tempuri.org/IStaticCodeAnalysisService/ParseReportResponse")]
        System.Threading.Tasks.Task<Test.E2E.StaticCodeAnalysis.StaticCodeAnalysisService.AnalysisReport[]> ParseReportAsync(Test.E2E.StaticCodeAnalysis.StaticCodeAnalysisService.Tools tool, string path, string branch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStaticCodeAnalysisService/GetResult", ReplyAction="http://tempuri.org/IStaticCodeAnalysisService/GetResultResponse")]
        bool GetResult(int threshold, Test.E2E.StaticCodeAnalysis.StaticCodeAnalysisService.Tools tool, string repository, string branch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStaticCodeAnalysisService/GetResult", ReplyAction="http://tempuri.org/IStaticCodeAnalysisService/GetResultResponse")]
        System.Threading.Tasks.Task<bool> GetResultAsync(int threshold, Test.E2E.StaticCodeAnalysis.StaticCodeAnalysisService.Tools tool, string repository, string branch);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStaticCodeAnalysisService/GetRecentResults", ReplyAction="http://tempuri.org/IStaticCodeAnalysisService/GetRecentResultsResponse")]
        Test.E2E.StaticCodeAnalysis.StaticCodeAnalysisService.GatingResult[] GetRecentResults(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStaticCodeAnalysisService/GetRecentResults", ReplyAction="http://tempuri.org/IStaticCodeAnalysisService/GetRecentResultsResponse")]
        System.Threading.Tasks.Task<Test.E2E.StaticCodeAnalysis.StaticCodeAnalysisService.GatingResult[]> GetRecentResultsAsync(string username);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IStaticCodeAnalysisServiceChannel : Test.E2E.StaticCodeAnalysis.StaticCodeAnalysisService.IStaticCodeAnalysisService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StaticCodeAnalysisServiceClient : System.ServiceModel.ClientBase<Test.E2E.StaticCodeAnalysis.StaticCodeAnalysisService.IStaticCodeAnalysisService>, Test.E2E.StaticCodeAnalysis.StaticCodeAnalysisService.IStaticCodeAnalysisService {
        
        public StaticCodeAnalysisServiceClient() {
        }
        
        public StaticCodeAnalysisServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public StaticCodeAnalysisServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StaticCodeAnalysisServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StaticCodeAnalysisServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool SignUp(string userName, string password) {
            return base.Channel.SignUp(userName, password);
        }
        
        public System.Threading.Tasks.Task<bool> SignUpAsync(string userName, string password) {
            return base.Channel.SignUpAsync(userName, password);
        }
        
        public bool SignIn(string userName, string password) {
            return base.Channel.SignIn(userName, password);
        }
        
        public System.Threading.Tasks.Task<bool> SignInAsync(string userName, string password) {
            return base.Channel.SignInAsync(userName, password);
        }
        
        public bool DeleteUser(string userName, string password) {
            return base.Channel.DeleteUser(userName, password);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteUserAsync(string userName, string password) {
            return base.Channel.DeleteUserAsync(userName, password);
        }
        
        public bool Logout() {
            return base.Channel.Logout();
        }
        
        public System.Threading.Tasks.Task<bool> LogoutAsync() {
            return base.Channel.LogoutAsync();
        }
        
        public bool Download(string url, string branch) {
            return base.Channel.Download(url, branch);
        }
        
        public System.Threading.Tasks.Task<bool> DownloadAsync(string url, string branch) {
            return base.Channel.DownloadAsync(url, branch);
        }
        
        public bool InvokeTool(string path, Test.E2E.StaticCodeAnalysis.StaticCodeAnalysisService.Tools tool) {
            return base.Channel.InvokeTool(path, tool);
        }
        
        public System.Threading.Tasks.Task<bool> InvokeToolAsync(string path, Test.E2E.StaticCodeAnalysis.StaticCodeAnalysisService.Tools tool) {
            return base.Channel.InvokeToolAsync(path, tool);
        }
        
        public Test.E2E.StaticCodeAnalysis.StaticCodeAnalysisService.AnalysisReport[] ParseReport(Test.E2E.StaticCodeAnalysis.StaticCodeAnalysisService.Tools tool, string path, string branch) {
            return base.Channel.ParseReport(tool, path, branch);
        }
        
        public System.Threading.Tasks.Task<Test.E2E.StaticCodeAnalysis.StaticCodeAnalysisService.AnalysisReport[]> ParseReportAsync(Test.E2E.StaticCodeAnalysis.StaticCodeAnalysisService.Tools tool, string path, string branch) {
            return base.Channel.ParseReportAsync(tool, path, branch);
        }
        
        public bool GetResult(int threshold, Test.E2E.StaticCodeAnalysis.StaticCodeAnalysisService.Tools tool, string repository, string branch) {
            return base.Channel.GetResult(threshold, tool, repository, branch);
        }
        
        public System.Threading.Tasks.Task<bool> GetResultAsync(int threshold, Test.E2E.StaticCodeAnalysis.StaticCodeAnalysisService.Tools tool, string repository, string branch) {
            return base.Channel.GetResultAsync(threshold, tool, repository, branch);
        }
        
        public Test.E2E.StaticCodeAnalysis.StaticCodeAnalysisService.GatingResult[] GetRecentResults(string username) {
            return base.Channel.GetRecentResults(username);
        }
        
        public System.Threading.Tasks.Task<Test.E2E.StaticCodeAnalysis.StaticCodeAnalysisService.GatingResult[]> GetRecentResultsAsync(string username) {
            return base.Channel.GetRecentResultsAsync(username);
        }
    }
}
